from typing import Dict, List
from personal_cabinet.models import UserProfile, Purchase, PurchaseType
from content_section.data import masterclasses, videocourses, patterns


class UserService:
    def __init__(self):
        # –ò–º–∏—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.users: Dict[int, UserProfile] = {}
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        self._init_test_data()

    def _init_test_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_purchases = [
            Purchase(
                id="masterclass_1",
                purchase_type=PurchaseType.masterclass,
                title="–§—É—Ç–±–æ–ª–∫–∞ —Å –Ω—É–ª—è",
                description="–£—á–∏–º—Å—è —à–∏—Ç—å –±–∞–∑–æ–≤—É—é —Ñ—É—Ç–±–æ–ª–∫—É —Å –Ω—É–ª—è, –≤—ã–±–∏—Ä–∞–µ–º —Ç–∫–∞–Ω—å –∏ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É.",
                link="https://example.com/masterclass1",
                category="–†—É–±–∞—à–∫–∏ –∏ —Ñ—É—Ç–±–æ–ª–∫–∏",
                purchase_date="2024-01-15",
                photo_url="https://picsum.photos/200/300?random=1",
            ),
            Purchase(
                id="videocourse_5",
                purchase_type=PurchaseType.videocourse,
                title="–õ–µ—Ç–Ω–µ–µ –ø–ª–∞—Ç—å–µ —Å –≤–æ–ª–∞–Ω–∞–º–∏",
                description="–°–æ–∑–¥–∞–µ–º –ª–µ–≥–∫–æ–µ –ø–ª–∞—Ç—å–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –≤–æ–ª–∞–Ω–∞–º–∏ –Ω–∞ —Ä—É–∫–∞–≤–∞—Ö.",
                link="https://example.com/videocourse5",
                category="–ü–ª–∞—Ç—å—è",
                purchase_date="2024-02-10",
                photo_url="https://picsum.photos/200/300?random=5",
            ),
            Purchase(
                id="pattern_16",
                purchase_type=PurchaseType.pattern,
                title="–Æ–±–∫–∞-–∫–∞—Ä–∞–Ω–¥–∞—à üî•",
                description="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –≤—ã–∫—Ä–æ–π–∫–∞ —é–±–∫–∏, –ø–æ–¥—Ö–æ–¥—è—â–∞—è –¥–ª—è –æ—Ñ–∏—Å–∞ –∏ –≤–µ—á–µ—Ä–Ω–∏—Ö –≤—ã—Ö–æ–¥–æ–≤.",
                link="https://example.com/pattern16",
                category="–Æ–±–∫–∏",
                purchase_date="2024-03-05",
                photo_url="https://picsum.photos/200/300?random=16",
            ),
        ]

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π user_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        test_user = UserProfile(
            user_id=12345,
            username="test_user",
            first_name="–¢–µ—Å—Ç",
            last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            purchases=test_purchases,
        )
        self.users[12345] = test_user

    def get_or_create_user(
        self,
        user_id: int,
        username: str = "",
        first_name: str = "",
        last_name: str = "",
    ) -> UserProfile:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.users:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –ª—é–±–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
            test_purchases = [
                Purchase(
                    id="masterclass_1",
                    purchase_type=PurchaseType.masterclass,
                    title="–§—É—Ç–±–æ–ª–∫–∞ —Å –Ω—É–ª—è",
                    description="–£—á–∏–º—Å—è —à–∏—Ç—å –±–∞–∑–æ–≤—É—é —Ñ—É—Ç–±–æ–ª–∫—É —Å –Ω—É–ª—è, –≤—ã–±–∏—Ä–∞–µ–º —Ç–∫–∞–Ω—å –∏ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É.",
                    link="https://example.com/masterclass1",
                    category="–†—É–±–∞—à–∫–∏ –∏ —Ñ—É—Ç–±–æ–ª–∫–∏",
                    purchase_date="2024-01-15",
                    photo_url="https://picsum.photos/200/300?random=1",
                ),
                Purchase(
                    id="videocourse_5",
                    purchase_type=PurchaseType.videocourse,
                    title="–õ–µ—Ç–Ω–µ–µ –ø–ª–∞—Ç—å–µ —Å –≤–æ–ª–∞–Ω–∞–º–∏",
                    description="–°–æ–∑–¥–∞–µ–º –ª–µ–≥–∫–æ–µ –ø–ª–∞—Ç—å–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –≤–æ–ª–∞–Ω–∞–º–∏ –Ω–∞ —Ä—É–∫–∞–≤–∞—Ö.",
                    link="https://example.com/videocourse5",
                    category="–ü–ª–∞—Ç—å—è",
                    purchase_date="2024-02-10",
                    photo_url="https://picsum.photos/200/300?random=5",
                ),
                Purchase(
                    id="pattern_16",
                    purchase_type=PurchaseType.pattern,
                    title="–Æ–±–∫–∞-–∫–∞—Ä–∞–Ω–¥–∞—à üî•",
                    description="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –≤—ã–∫—Ä–æ–π–∫–∞ —é–±–∫–∏, –ø–æ–¥—Ö–æ–¥—è—â–∞—è –¥–ª—è –æ—Ñ–∏—Å–∞ –∏ –≤–µ—á–µ—Ä–Ω–∏—Ö –≤—ã—Ö–æ–¥–æ–≤.",
                    link="https://example.com/pattern16",
                    category="–Æ–±–∫–∏",
                    purchase_date="2024-03-05",
                    photo_url="https://picsum.photos/200/300?random=16",
                ),
            ]

            self.users[user_id] = UserProfile(
                user_id=user_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                purchases=test_purchases,
            )
        return self.users[user_id]

    def add_purchase(
        self, user_id: int, item_id: str, purchase_type: PurchaseType
    ) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        user = self.get_or_create_user(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫—É–ø–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
        if user.has_purchase(item_id):
            return False

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        item_data = None
        if purchase_type == PurchaseType.masterclass:
            item_data = masterclasses.get(item_id)
        elif purchase_type == PurchaseType.videocourse:
            item_data = videocourses.get(item_id)
        elif purchase_type == PurchaseType.pattern:
            item_data = patterns.get(item_id)

        if not item_data:
            return False

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–∫—É–ø–∫–∏
        purchase = Purchase(
            id=item_id,
            purchase_type=purchase_type,
            title=item_data["title"],
            description=item_data["description"],
            link=item_data["link"],
            category=item_data["category"],
            purchase_date="2024-09-22",  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
            photo_url=item_data.get("photo_url", ""),
        )

        user.purchases.append(purchase)
        return True

    def get_user_purchases(self, user_id: int) -> List[Purchase]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.get_or_create_user(user_id)
        return user.purchases

    def get_user_purchases_by_type(
        self, user_id: int, purchase_type: PurchaseType
    ) -> List[Purchase]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–∏–ø—É"""
        user = self.get_or_create_user(user_id)
        return user.get_purchases_by_type(purchase_type)

    def get_purchase_categories(
        self, user_id: int, purchase_type: PurchaseType
    ) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–∏–ø—É"""
        purchases = self.get_user_purchases_by_type(user_id, purchase_type)
        return list(set(p.category for p in purchases))

    def get_category_by_index(
        self, user_id: int, purchase_type: PurchaseType, category_index: int
    ) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        categories = self.get_purchase_categories(user_id, purchase_type)
        if 0 <= category_index < len(categories):
            return categories[category_index]
        return ""

    def get_purchase_by_index_in_category(
        self, user_id: int, purchase_type: PurchaseType, category: str, item_index: int
    ) -> Purchase:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∫—É–ø–∫—É –ø–æ –∏–Ω–¥–µ–∫—Å—É –≤ —Ä–∞–º–∫–∞—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        purchases = self.get_purchases_by_category(user_id, purchase_type, category)
        if 0 <= item_index < len(purchases):
            return purchases[item_index]
        return None

    def get_category_index_by_name(
        self, user_id: int, purchase_type: PurchaseType, category_name: str
    ) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—é"""
        categories = self.get_purchase_categories(user_id, purchase_type)
        try:
            return categories.index(category_name)
        except ValueError:
            return -1

    def get_purchases_by_category(
        self, user_id: int, purchase_type: PurchaseType, category: str
    ) -> List[Purchase]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–∏–ø—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        purchases = self.get_user_purchases_by_type(user_id, purchase_type)
        return [p for p in purchases if p.category == category]


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
user_service = UserService()
